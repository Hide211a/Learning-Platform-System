import { Outlet, Link, useLocation } from 'react-router-dom'
import { useState, useEffect } from 'react'
import { useAuth } from './features/auth/AuthContext'
import { useQuery } from '@tanstack/react-query'
import { getCourses } from './lib/contentful'
import { 
  getCategoryIconElement, 
  categoryGroups 
} from "./lib/courseCategories"
import { ScrollToTop } from './components/ScrollToTop'

function App() {
  const { user, userRole, roleLoading, logout } = useAuth()
  const location = useLocation()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [userMenuOpen, setUserMenuOpen] = useState(false)
  const [coursesMenuOpen, setCoursesMenuOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [searchResults, setSearchResults] = useState<any[]>([])
  const [showSearchResults, setShowSearchResults] = useState(false)
  const [currentPath, setCurrentPath] = useState(location.pathname)

  // –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –¥–ª—è –ø–æ—à—É–∫—É
  const { data: courses } = useQuery({ 
    queryKey: ['courses'], 
    queryFn: getCourses 
  })

  // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç—É
  useEffect(() => {
    setCurrentPath(location.pathname)
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É
    setMobileMenuOpen(false)
    setUserMenuOpen(false)
    setCoursesMenuOpen(false)
  }, [location.pathname])

  // –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∫—É—Ä—Å—ñ–≤
  const handleSearch = (query: string) => {
    setSearchQuery(query)
    
    if (!query.trim() || !courses) {
      setSearchResults([])
      setShowSearchResults(false)
      return
    }

    const filtered = courses.filter(course => 
      course.fields.title.toLowerCase().includes(query.toLowerCase()) ||
      (course.fields.description && course.fields.description.toLowerCase().includes(query.toLowerCase())) ||
      (course.fields.category && course.fields.category.toLowerCase().includes(query.toLowerCase()))
    ).slice(0, 5) // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

    setSearchResults(filtered)
    setShowSearchResults(true)
  }

  // –ó–∞–∫—Ä–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (!target.closest('.search-container')) {
        setShowSearchResults(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const getUserDisplayName = () => {
    if (!user) return ''
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —ñ–º'—è –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ (–ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    try {
      const userId = user.uid
      const savedProfile = localStorage.getItem(`userProfile_${userId}`)
      if (savedProfile) {
        const parsedProfile = JSON.parse(savedProfile)
        if (parsedProfile.displayName && parsedProfile.displayName.trim()) {
          return parsedProfile.displayName
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', error)
    }
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ displayName –∑ Firebase
    if (user.displayName) {
      return user.displayName
    }
    
    // –í –æ—Å—Ç–∞–Ω–Ω—é —á–µ—Ä–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É email
    if (user.email) {
      const emailName = user.email.split('@')[0]
      return emailName.charAt(0).toUpperCase() + emailName.slice(1)
    }
    
    return '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
  const isActiveTab = (path: string) => {
    if (path === '/') {
      return currentPath === '/'
    }
    return currentPath.startsWith(path)
  }

  // –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ Contentful
  const getDynamicCategories = () => {
    if (!courses) return { technical: [], nonTechnical: [] }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫—É—Ä—Å—ñ–≤
    const uniqueCategories = [...new Set(courses.map(course => course.fields.category).filter(Boolean))]
    
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤ –∫—É—Ä—Å–∞—Ö, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ
    if (uniqueCategories.length === 0) {
      return { 
        technical: categoryGroups.technical, 
        nonTechnical: categoryGroups.nonTechnical 
      }
    }
    
    const technical = uniqueCategories.filter(cat => cat && categoryGroups.technical.includes(cat))
    const nonTechnical = uniqueCategories.filter(cat => cat && categoryGroups.nonTechnical.includes(cat))
    
    return { technical, nonTechnical }
  }

  const { technical: dynamicTechnical, nonTechnical: dynamicNonTechnical } = getDynamicCategories()

  // –î–∞–Ω—ñ –¥–ª—è dropdown –º–µ–Ω—é –∫—É—Ä—Å—ñ–≤
  const technicalCourses = dynamicTechnical.map(category => {
    const { IconComponent } = getCategoryIconElement(category!)
    const courseCount = courses?.filter(c => c.fields.category === category).length || 0
    return {
      name: category,
      icon: <IconComponent />,
      level: category === 'Security' || category === 'Cloud' ? '–ü–†–û–°–£–ù–£–¢–ò–ô' : '',
      count: courseCount
    }
  })

  const nonTechnicalCourses = dynamicNonTechnical.map(category => {
    const { IconComponent } = getCategoryIconElement(category!)
    const courseCount = courses?.filter(c => c.fields.category === category).length || 0
    return {
      name: category,
      icon: <IconComponent />,
      level: category === 'Other' ? '–Ω–æ–≤–∏–π' : '',
      count: courseCount
    }
  })

  // –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏ - —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—ñ –º–∞—é—Ç—å –∫—É—Ä—Å–∏
  const popularCourses = [...technicalCourses, ...nonTechnicalCourses]
    .filter(course => course.count > 0) // –¢—ñ–ª—å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫—É—Ä—Å–∞–º–∏
    .sort((a, b) => b.count - a.count) // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫—É—Ä—Å—ñ–≤
    .slice(0, 4) // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-4
    .map(course => ({
      name: course.name,
      icon: course.icon,
      image: course.name === 'Frontend' ? 'üé®' : 
             course.name === 'Backend' ? '‚öôÔ∏è' : 
             course.name === 'JavaScript' ? 'üìú' : 
             course.name === 'Database' ? 'üóÑÔ∏è' : 
             course.name === 'Security' ? 'üîí' :
             course.name === 'Cloud' ? '‚òÅÔ∏è' :
             course.name === 'Mobile' ? 'üì±' : 'üìö',
      count: course.count
    }))

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å
  const shouldShowAdmin = userRole === 'admin' || (roleLoading && user?.email === 'siidechaiin@gmail.com')

  const navigationItems = [
    { label: '–ì–æ–ª–æ–≤–Ω–∞', path: '/', icon: 'üè†' },
    { label: '–ö—É—Ä—Å–∏', path: '/catalog', icon: 'üìö', hasDropdown: true },
    { label: '–ü—Ä–æ –Ω–∞—Å', path: '/about', icon: '‚ÑπÔ∏è' },
    { label: '–ö–æ–Ω—Ç–∞–∫—Ç–∏', path: '/contact', icon: 'üìû' },
    // –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ –∞–±–æ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ email
    ...(shouldShowAdmin ? [{ label: '–ê–¥–º—ñ–Ω', path: '/admin', icon: '‚öôÔ∏è' }] : [])
  ]


  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <ScrollToTop />
      {/* Header - Mate Academy Style */}
      <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo - Left Side */}
            <Link to="/" className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-lg">E</span>
              </div>
              <div className="flex flex-col">
                <span className="text-lg font-bold text-gray-900">Edu</span>
                <span className="text-sm text-gray-600">Platform</span>
              </div>
            </Link>

            {/* Search Bar */}
            <div className="hidden lg:flex flex-1 max-w-xs mx-4 search-container">
              <div className="relative w-full">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
                <input
                  type="text"
                  placeholder="–ü–æ—à—É–∫ –∫—É—Ä—Å—ñ–≤..."
                  value={searchQuery}
                  onChange={(e) => handleSearch(e.target.value)}
                  onFocus={() => searchQuery && setShowSearchResults(true)}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-full leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                />
                
                {/* Search Results Dropdown */}
                {showSearchResults && searchResults.length > 0 && (
                  <div className="absolute top-full left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden z-50">
                    <div className="p-2">
                      {searchResults.map((course) => (
                        <Link
                          key={course.id}
                          to={`/courses/${course.id}`}
                          onClick={() => {
                            setShowSearchResults(false)
                            setSearchQuery('')
                          }}
                          className="flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg transition-colors duration-200"
                        >
                          <div className="w-12 h-8 bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg flex items-center justify-center">
                            <span className="text-xs font-bold text-gray-600">üìö</span>
                          </div>
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium text-gray-900 truncate">
                              {course.fields.title}
                            </p>
                            {course.fields.description && (
                              <p className="text-xs text-gray-500 truncate">
                                {course.fields.description}
                              </p>
                            )}
                          </div>
                          {course.fields.level && (
                            <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">
                              {course.fields.level}
                            </span>
                          )}
                        </Link>
                      ))}
                    </div>
                  </div>
                )}

                {/* No Results */}
                {showSearchResults && searchQuery && searchResults.length === 0 && (
                  <div className="absolute top-full left-0 right-0 mt-2 bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden z-50">
                    <div className="p-4 text-center">
                      <p className="text-sm text-gray-500">–ö—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                      <p className="text-xs text-gray-400 mt-1">–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Navigation - Center */}
            <nav className="hidden lg:flex items-center space-x-8 mr-8">
              {navigationItems.map((item) => (
                item.hasDropdown ? (
                  <div key={item.path} className="relative">
                    <button
                      onClick={() => setCoursesMenuOpen(!coursesMenuOpen)}
                      className={`flex items-center space-x-1 px-3 py-2 rounded-lg transition-colors duration-200 ${
                        isActiveTab(item.path) 
                          ? 'text-red-600 bg-red-50 hover:bg-red-100' 
                          : 'text-gray-600 hover:text-gray-900 bg-gray-100 hover:bg-gray-200'
                      }`}
                    >
                      <span className="font-medium">{item.label}</span>
                      <svg className={`w-4 h-4 transition-transform duration-200 ${coursesMenuOpen ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                    
                    {/* Courses Dropdown */}
                    {coursesMenuOpen && (
                      <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 w-[32rem] bg-white rounded-xl shadow-large border border-gray-200 overflow-hidden z-50 lg:block hidden">
                        <div className="p-6">
                          <div className="flex gap-4">
                            {/* Left side - All courses */}
                            <div className="flex-1 min-w-0">
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">–í—Å—ñ –∫—É—Ä—Å–∏</h3>
                              
                              <div className="flex gap-2 mb-4">
                                <span className="px-3 py-1 bg-primary-100 text-primary-800 text-sm font-medium rounded-full">
              –¢–µ—Ö–Ω—ñ—á–Ω—ñ
                                </span>
                                <span className="px-3 py-1 bg-gray-100 text-gray-800 text-sm font-medium rounded-full">
                                  –ù–µ—Ç–µ—Ö–Ω—ñ—á–Ω—ñ
                                </span>
                              </div>

                              {/* Technical courses */}
                              <div className="mb-4">
                                <h4 className="text-sm font-semibold text-gray-600 mb-2">–¢–µ—Ö–Ω—ñ—á–Ω—ñ</h4>
                                <div className="space-y-1">
              {technicalCourses.map((course, index) => (
                                    <Link
                  key={index}
                  to="/catalog"
                                      onClick={() => setCoursesMenuOpen(false)}
                                      className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg transition-colors"
                >
                  <div className="flex items-center gap-3">
                  {course.icon}
                    <span className="text-sm text-gray-700">{course.name}</span>
                  {course.level && (
                                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                          course.level === '–Ω–æ–≤–∏–π' 
                                            ? 'bg-success-100 text-success-800' 
                                            : 'bg-warning-100 text-warning-800'
                                        }`}>
                                          {course.level}
                      </span>
                    )}
                  </div>
                  {course.count > 0 && (
                    <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                      {course.count}
                                        </span>
                                      )}
                                    </Link>
                                  ))}
                                </div>
                              </div>

                              {/* Non-technical courses */}
                              <div>
                                <h4 className="text-sm font-semibold text-gray-600 mb-2">–ù–µ—Ç–µ—Ö–Ω—ñ—á–Ω—ñ</h4>
                                <div className="space-y-1">
              {nonTechnicalCourses.map((course, index) => (
                                    <Link
                  key={index}
                  to="/catalog"
                                      onClick={() => setCoursesMenuOpen(false)}
                                      className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg transition-colors"
                >
                  <div className="flex items-center gap-3">
                  {course.icon}
                    <span className="text-sm text-gray-700">{course.name}</span>
                  {course.level && (
                                        <span className="px-2 py-1 text-xs font-medium rounded-full bg-success-100 text-success-800">
                                          {course.level}
                      </span>
                    )}
                  </div>
                  {course.count > 0 && (
                    <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                      {course.count}
                                        </span>
                                      )}
                                    </Link>
                                  ))}
                                </div>
                              </div>
                            </div>

                            {/* Right side - Popular */}
                            <div className="w-48 bg-gradient-to-br from-primary-50 to-secondary-50 p-4 rounded-lg">
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü–æ–ø—É–ª—è—Ä–Ω—ñ</h3>
                              <div className="space-y-2">
            {popularCourses.length > 0 ? (
                                popularCourses.map((course, index) => (
                                  <Link
                key={index}
                to="/catalog"
                                    onClick={() => setCoursesMenuOpen(false)}
                                    className="flex items-center justify-between p-2 bg-white rounded-lg hover:shadow-soft transition-all"
                                  >
                                    <div className="flex items-center gap-2">
                                    <span className="text-lg">{course.image}</span>
                    {course.icon}
                                    <span className="text-sm font-medium text-gray-700">{course.name}</span>
                                    </div>
                                    <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                      {course.count}
                                    </span>
                                  </Link>
                                ))
                              ) : (
                                <div className="text-center py-4">
                                  <p className="text-sm text-gray-500">–ö—É—Ä—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...</p>
                                </div>
                              )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <Link
                      key={item.path}
                      to={item.path}
                    className={`font-medium transition-colors duration-200 ${
                      isActiveTab(item.path) 
                        ? 'text-red-600' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    {item.label}
                  </Link>
                )
              ))}
            </nav>

            {/* Right Side - Utility Buttons */}
            <div className="flex items-center space-x-4 ml-4">
            {/* User Menu / Auth Buttons */}
            <div className="flex items-center space-x-3">
          {user ? (
                <div className="flex items-center space-x-3">
                  <span className="hidden sm:block text-gray-700 font-medium">
                    –ü—Ä–∏–≤—ñ—Ç, {getUserDisplayName()}!
                  </span>
                  <div className="relative">
                    <button
                      onClick={() => setUserMenuOpen(!userMenuOpen)}
                      className="flex items-center justify-center w-8 h-8 text-gray-600 hover:text-gray-900 transition-colors duration-200"
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </button>
                    
                    {/* User Dropdown */}
                    {userMenuOpen && (
                      <div className="absolute top-full right-0 mt-2 w-56 bg-white rounded-xl shadow-large border border-gray-200 overflow-hidden z-50">
                        <div className="p-4 border-b border-gray-100">
                          <p className="font-semibold text-gray-900">{getUserDisplayName()}</p>
                          <p className="text-sm text-gray-500">{user.email}</p>
                        </div>
                        <div className="p-2">
                          <Link
                            to="/profile"
                            onClick={() => setUserMenuOpen(false)}
                            className="flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
                          >
                            <span>üë§</span>
                            <span>–ü—Ä–æ—Ñ—ñ–ª—å</span>
                          </Link>
                          <button
                            onClick={() => {
                              logout()
                              setUserMenuOpen(false)
                            }}
                            className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
                          >
                            <span>üö™</span>
                            <span>–í–∏–π—Ç–∏</span>
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div className="flex items-center space-x-3">
                  <Link to="/auth" className="hidden sm:block">
                    <button className="text-gray-600 hover:text-gray-900 font-medium transition-colors duration-200">
                      –£–≤—ñ–π—Ç–∏
                    </button>
                  </Link>
                  <Link to="/auth">
                    <button className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200">
                      –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
                    </button>
                  </Link>
                </div>
              )}
              </div>
            </div>

              {/* Mobile Menu Button */}
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="md:hidden p-2 text-gray-700 hover:bg-gray-50 rounded-xl transition-all duration-300 group"
              >
                <svg className={`w-6 h-6 transition-transform duration-300 ${mobileMenuOpen ? 'rotate-90' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  {mobileMenuOpen ? (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                  )}
                </svg>
              </button>
            </div>
          </div>
        {/* Mobile Menu - Animated */}
        <div className={`md:hidden overflow-hidden transition-all duration-300 ${mobileMenuOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
          <div className="border-t border-gray-200 bg-white/95 backdrop-blur-sm">
            <div className="px-4 py-6 space-y-3">
              {navigationItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  onClick={() => setMobileMenuOpen(false)}
                  className={`block px-4 py-3 rounded-lg transition-colors duration-200 ${
                    isActiveTab(item.path) 
                      ? 'text-red-600 bg-red-50' 
                      : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
                  }`}
                >
                  <span className="font-medium">{item.label}</span>
                </Link>
              ))}
              <div className="border-t border-gray-200 pt-2 mt-2">
                {user ? (
                  <div className="space-y-2">
                    <div className="px-3 py-2">
                      <p className="font-semibold text-gray-900">{getUserDisplayName()}</p>
                      <p className="text-sm text-gray-500">{user.email}</p>
                    </div>
                    <Link
                      to="/profile"
                      onClick={() => setMobileMenuOpen(false)}
                      className="flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
                    >
                      <span>üë§</span>
                      <span>–ü—Ä–æ—Ñ—ñ–ª—å</span>
                    </Link>
                    <button
                      onClick={() => {
                        logout()
                        setMobileMenuOpen(false)
                      }}
                      className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
                    >
                      <span>üö™</span>
                      <span>–í–∏–π—Ç–∏</span>
                    </button>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Link to="/auth" onClick={() => setMobileMenuOpen(false)}>
                      <button className="w-full px-4 py-2 text-gray-600 hover:text-gray-900 font-medium transition-colors duration-200">
                        –£–≤—ñ–π—Ç–∏
                      </button>
                    </Link>
                    <Link to="/auth" onClick={() => setMobileMenuOpen(false)}>
                      <button className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200">
                        –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
                      </button>
                    </Link>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1">
        <Outlet />
      </main>

      {/* Click outside to close dropdowns */}
      {(coursesMenuOpen || userMenuOpen || mobileMenuOpen) && (
        <div
          className="fixed inset-0 z-40"
          onClick={() => {
            setCoursesMenuOpen(false)
            setUserMenuOpen(false)
            setMobileMenuOpen(false)
          }}
        />
      )}
    </div>
  )
}

export default App