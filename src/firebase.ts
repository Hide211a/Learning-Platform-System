import { initializeApp } from 'firebase/app'
import { getAuth, GoogleAuthProvider } from 'firebase/auth'
import { getFirestore, collection, addDoc, serverTimestamp, getDocs, query, orderBy, where, doc, setDoc, onSnapshot } from 'firebase/firestore'

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
}

export const app = initializeApp(firebaseConfig)
export const auth = getAuth(app)
export const googleProvider = new GoogleAuthProvider()
export const db = getFirestore(app)

// –¢–∏–ø–∏ –¥–ª—è —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export type UserRole = 'user' | 'admin' | 'moderator'

export type FirestoreUser = {
  uid: string
  email: string
  displayName: string
  photoURL: string | null
  role: UserRole
  createdAt: any
  lastLoginAt: any
  isActive: boolean
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firestore
export const createUserInFirestore = async (user: any) => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const userRef = doc(db, 'users', user.uid)
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let userRole: UserRole = 'user'
    
    // –Ø–∫—â–æ —Ü–µ –≤–∞—à email, —Ä–æ–±–∏–º–æ –∞–¥–º—ñ–Ω–æ–º
    if (user.email === 'siidechaiin@gmail.com') {
      userRole = 'admin'
      console.log('üîë –ù–∞–∑–Ω–∞—á–µ–Ω–æ —Ä–æ–ª—å –∞–¥–º—ñ–Ω–∞ –¥–ª—è:', user.email)
    }
    
    await setDoc(userRef, {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName || user.email?.split('@')[0] || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      photoURL: user.photoURL || null,
      role: userRole,
      createdAt: serverTimestamp(),
      lastLoginAt: serverTimestamp(),
      isActive: true
    }, { merge: true }) // merge: true –¥–æ–∑–≤–æ–ª—è—î –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏

    console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Firestore:', user.uid, '–†–æ–ª—å:', userRole)
    return { success: true, role: userRole }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firestore:', error)
    return { success: false, error: error.message }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É
export const subscribeToNewsletter = async (email: string) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Firestore –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const docRef = await addDoc(collection(db, 'newsletter_subscribers'), {
      email: email.toLowerCase().trim(),
      createdAt: serverTimestamp(),
      isActive: true
    })
    return { success: true, id: docRef.id }
  } catch (error: any) {
    console.error('Error subscribing to newsletter:', error)
    
    // –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
    try {
      const subscribers = JSON.parse(localStorage.getItem('newsletter_subscribers') || '[]')
      const newSubscriber = {
        email: email.toLowerCase().trim(),
        createdAt: new Date().toISOString(),
        isActive: true,
        id: Date.now().toString()
      }
      subscribers.push(newSubscriber)
      localStorage.setItem('newsletter_subscribers', JSON.stringify(subscribers))
      
      console.log('üìß Email –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newSubscriber)
      return { success: true, id: newSubscriber.id, local: true }
    } catch (localError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', localError)
    }
    
    // –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    if (error.code === 'permission-denied') {
      return { success: false, error: '–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –∑–∞–ø–∏—Å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firestore.' }
    } else if (error.code === 'unavailable') {
      return { success: false, error: 'Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. Email –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.' }
    } else if (error.message?.includes('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')) {
      return { success: false, error: 'Firestore –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. Email –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.' }
    }
    
    return { success: false, error: error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' }
  }
}

// –¢–∏–ø–∏ –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤
export type Testimonial = {
  id?: string
  name: string
  role: string
  content: string
  rating: number
  email?: string
  approved: boolean
  createdAt: any
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
export const addTestimonial = async (testimonial: Omit<Testimonial, 'id' | 'createdAt' | 'approved'>) => {
  try {
    const testimonialsRef = collection(db, 'testimonials')
    const newTestimonial = {
      ...testimonial,
      approved: false, // –í—ñ–¥–≥—É–∫–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
      createdAt: serverTimestamp()
    }
    
    const docRef = await addDoc(testimonialsRef, newTestimonial)
    console.log('‚úÖ –í—ñ–¥–≥—É–∫ –¥–æ–¥–∞–Ω–æ:', docRef.id)
    return { success: true, id: docRef.id }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', error)
    return { success: false, error: error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
export const getApprovedTestimonials = async (): Promise<Testimonial[]> => {
  try {
    const testimonialsRef = collection(db, 'testimonials')
    // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏, –ø–æ—Ç—ñ–º —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
    const q = query(testimonialsRef, orderBy('createdAt', 'desc'))
    
    const querySnapshot = await getDocs(q)
    const testimonials: Testimonial[] = []
    
    querySnapshot.forEach((doc) => {
      const data = doc.data() as Testimonial
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å—Ö–≤–∞–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏
      if (data.approved === true) {
        testimonials.push({
          id: doc.id,
          ...data
        })
      }
    })
    
    console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–≥—É–∫—ñ–≤:', testimonials.length)
    return testimonials
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:', error)
    
    // Fallback - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
    console.log('üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –≤—ñ–¥–≥—É–∫–∏')
    return [
      {
        id: 'demo-1',
        name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ',
        role: 'Frontend Developer',
        content: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–ø–æ–º–æ–≥–ª–∞ –º–µ–Ω—ñ —à–≤–∏–¥–∫–æ –æ—Å–≤–æ—ó—Ç–∏ React —Ç–∞ –∑–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É –º—Ä—ñ—ó. –ö—É—Ä—Å–∏ –¥—É–∂–µ —è–∫—ñ—Å–Ω—ñ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ.',
        rating: 5,
        approved: true,
        createdAt: new Date()
      },
      {
        id: 'demo-2',
        name: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
        role: 'UX/UI Designer',
        content: '–ß—É–¥–æ–≤—ñ –∫—É—Ä—Å–∏ –∑ –¥–∏–∑–∞–π–Ω—É! –í–∏–∫–ª–∞–¥–∞—á—ñ –¥—É–∂–µ –¥–æ—Å–≤—ñ–¥—á–µ–Ω—ñ, –∞ –º–∞—Ç–µ—Ä—ñ–∞–ª –ø–æ–¥–∞—î—Ç—å—Å—è –∑—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ —Ü—ñ–∫–∞–≤–æ.',
        rating: 5,
        approved: true,
        createdAt: new Date()
      },
      {
        id: 'demo-3',
        name: '–î–º–∏—Ç—Ä–æ –°–∏–¥–æ—Ä–µ–Ω–∫–æ',
        role: 'Backend Developer',
        content: '–ó–∞–≤–¥—è–∫–∏ —Ü—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ —è –æ—Å–≤–æ—ó–≤ Node.js —Ç–∞ MongoDB. –¢–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é –≤ —Ç–æ–ø–æ–≤—ñ–π IT-–∫–æ–º–ø–∞–Ω—ñ—ó.',
        rating: 5,
        approved: true,
        createdAt: new Date()
      }
    ]
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ (–¥–ª—è –∞–¥–º—ñ–Ω–∞)
export const getAllTestimonials = async (): Promise<Testimonial[]> => {
  try {
    const testimonialsRef = collection(db, 'testimonials')
    const q = query(testimonialsRef, orderBy('createdAt', 'desc'))
    
    const querySnapshot = await getDocs(q)
    const testimonials: Testimonial[] = []
    
    querySnapshot.forEach((doc) => {
      testimonials.push({
        id: doc.id,
        ...doc.data()
      } as Testimonial)
    })
    
    return testimonials
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–≥—É–∫—ñ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–¥–≥—É–∫—ñ–≤
export const getTestimonialsStats = async () => {
  try {
    const testimonials = await getApprovedTestimonials()
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ (–æ—Ü—ñ–Ω–∫–∞ 4-5 –∑—ñ—Ä–æ–∫)
    const satisfiedReviews = testimonials.filter(t => t.rating >= 4).length
    const satisfactionPercentage = testimonials.length > 0 
      ? Math.round((satisfiedReviews / testimonials.length) * 100)
      : 0
    
    const stats = {
      totalReviews: testimonials.length,
      averageRating: testimonials.length > 0 
        ? (testimonials.reduce((sum, t) => sum + t.rating, 0) / testimonials.length).toFixed(1)
        : '0.0',
      realReviewsPercentage: '100%', // –í—Å—ñ —Å—Ö–≤–∞–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –≤–≤–∞–∂–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–º–∏
      satisfiedStudents: testimonials.length > 0 ? `${testimonials.length}+` : '0+',
      satisfactionPercentage: satisfactionPercentage
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤:', stats)
    return stats
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
    // Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    return {
      totalReviews: 0,
      averageRating: '0.0',
      realReviewsPercentage: '100%',
      satisfiedStudents: '0+',
      satisfactionPercentage: 0
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export const getUsersCount = async () => {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó users
    const usersRef = collection(db, 'users')
    const snapshot = await getDocs(usersRef)
    
    const count = snapshot.size
    console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Firestore:', count)
    
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ–º–∞—î, –∞–ª–µ —î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º—É–º 1
    if (count === 0 && auth.currentUser) {
      console.log('üìù –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Firestore, –∞–ª–µ —î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á')
      return 1
    }
    
    return count
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error)
    
    // Fallback - —è–∫—â–æ —î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1
    if (auth.currentUser) {
      console.log('üìù Fallback: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π)')
      return 1
    }
    
    // Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤ —è–∫ –ø—Ä–∏–±–ª–∏–∑–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    try {
      const testimonials = await getApprovedTestimonials()
      return testimonials.length > 0 ? testimonials.length * 10 : 0 // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    } catch {
      return 0
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
export const getCertificatesCount = async () => {
  try {
    const certificatesRef = collection(db, 'certificates')
    const snapshot = await getDocs(certificatesRef)
    
    const count = snapshot.size
    console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤:', count)
    return count
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤:', error)
    // Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –∑ –≤—ñ–¥–≥—É–∫—ñ–≤
    try {
      const testimonials = await getApprovedTestimonials()
      return Math.floor(testimonials.length * 0.7) // 70% –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≥—É–∫—ñ–≤
    } catch {
      return 0
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
export const getPlatformStats = async () => {
  try {
    const [usersCount, certificatesCount, testimonialsStats] = await Promise.all([
      getUsersCount(),
      getCertificatesCount(),
      getTestimonialsStats()
    ])
    
    const stats = {
      students: usersCount,
      certificates: certificatesCount,
      courses: 0, // –ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Contentful
      satisfiedStudents: testimonialsStats.satisfiedStudents,
      satisfactionPercentage: testimonialsStats.satisfactionPercentage
    }
    
    console.log('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:', stats)
    return stats
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
    return {
      students: 0,
      certificates: 0,
      courses: 0,
      satisfiedStudents: '0+',
      satisfactionPercentage: 0
    }
  }
}

// –¢–∏–ø –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
export type ContactMessage = {
  id?: string
  name: string
  email: string
  subject: string
  message: string
  status: 'new' | 'read' | 'replied' | 'archived'
  createdAt: any
  userAgent?: string
  ipAddress?: string
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export const sendContactMessage = async (messageData: Omit<ContactMessage, 'id' | 'createdAt' | 'status'>) => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const contactRef = collection(db, 'contact_messages')
    const newMessage = {
      ...messageData,
      status: 'new' as const,
      createdAt: serverTimestamp(),
      userAgent: navigator.userAgent,
      // IP –∞–¥—Ä–µ—Å—É –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å, –∞–ª–µ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
    
    const docRef = await addDoc(contactRef, newMessage)
    console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:', docRef.id)
    return { success: true, id: docRef.id }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error)
    
    // Fallback - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
    try {
      const messages = JSON.parse(localStorage.getItem('contact_messages') || '[]')
      const newMessage = {
        ...messageData,
        status: 'new',
        createdAt: new Date().toISOString(),
        userAgent: navigator.userAgent,
        id: Date.now().toString()
      }
      messages.push(newMessage)
      localStorage.setItem('contact_messages', JSON.stringify(messages))
      
      console.log('üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newMessage)
      return { success: true, id: newMessage.id, local: true }
    } catch (localError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', localError)
    }
    
    return { success: false, error: error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∞–¥–º—ñ–Ω–∞)
export const getAllContactMessages = async (): Promise<ContactMessage[]> => {
  try {
    const contactRef = collection(db, 'contact_messages')
    const q = query(contactRef, orderBy('createdAt', 'desc'))
    
    const querySnapshot = await getDocs(q)
    const messages: ContactMessage[] = []
    
    querySnapshot.forEach((doc) => {
      messages.push({
        id: doc.id,
        ...doc.data()
      } as ContactMessage)
    })
    
    return messages
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firestore
export const ensureCurrentUserInFirestore = async () => {
  try {
    if (auth.currentUser) {
      const result = await createUserInFirestore(auth.currentUser)
      if (result.success) {
        console.log('‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Firestore')
        return true
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', result.error)
        return false
      }
    } else {
      console.log('üìù –ù–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
      return false
    }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ensureCurrentUserInFirestore:', error)
    return false
  }
}

// –¢–∏–ø –¥–ª—è streak –¥–∞–Ω–∏—Ö
export type FirestoreStreak = {
  currentStreak: number
  longestStreak: number
  lastLearningDate: any
  streakStartDate: any
  updatedAt: any
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è streak –≤ Firestore
export const saveStreakToFirestore = async (userId: string, streakData: Omit<FirestoreStreak, 'updatedAt'>) => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const streakRef = doc(db, 'user_streaks', userId)
    await setDoc(streakRef, {
      ...streakData,
      updatedAt: serverTimestamp()
    }, { merge: true })

    console.log('‚úÖ Streak –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firestore –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId)
    return { success: true }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è streak:', error)
    return { success: false, error: error.message }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è streak –∑ Firestore
export const getStreakFromFirestore = async (userId: string): Promise<FirestoreStreak | null> => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const streakRef = doc(db, 'user_streaks', userId)
    const streakDoc = await getDocs(collection(db, 'user_streaks'))
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let userStreak = null
    streakDoc.forEach((doc) => {
      if (doc.id === userId) {
        userStreak = { id: doc.id, ...doc.data() } as FirestoreStreak
      }
    })

    if (userStreak) {
      console.log('‚úÖ Streak –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firestore –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId)
      return userStreak
    } else {
      console.log('üìù Streak –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Firestore –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId)
      return null
    }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è streak:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getUserRole = async (userId: string): Promise<UserRole> => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const userRef = doc(db, 'users', userId)
    const userDoc = await getDocs(collection(db, 'users'))
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let userRole: UserRole = 'user'
    let userFound = false
    
    userDoc.forEach((doc) => {
      if (doc.id === userId) {
        const userData = doc.data() as FirestoreUser
        userRole = userData.role || 'user'
        userFound = true
        console.log('üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firestore:', doc.id, '–†–æ–ª—å:', userRole)
      }
    })

    if (!userFound) {
      console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Firestore:', userId)
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –∞–ª–µ —Ü–µ –≤–∞—à email, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ admin
      const currentUser = auth.currentUser
      if (currentUser?.email === 'siidechaiin@gmail.com') {
        console.log('üîë –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –∞–¥–º—ñ–Ω–∞ –¥–ª—è:', currentUser.email)
        return 'admin'
      }
    }

    console.log('‚úÖ –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞:', userId, '–†–æ–ª—å:', userRole)
    return userRole
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error)
    // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ —Ü–µ –≤–∞—à email, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ admin
    const currentUser = auth.currentUser
    if (currentUser?.email === 'siidechaiin@gmail.com') {
      console.log('üîë Fallback: –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –∞–¥–º—ñ–Ω–∞ –¥–ª—è:', currentUser.email)
      return 'admin'
    }
    return 'user' // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º
export const isUserAdmin = async (userId: string): Promise<boolean> => {
  const role = await getUserRole(userId)
  return role === 'admin'
}

// –¢–∏–ø –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
export type FirestoreComment = {
  id?: string
  courseId: string
  author: string
  content: string
  createdAt: any
  userId: string
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
export const addComment = async (commentData: Omit<FirestoreComment, 'id' | 'createdAt'>) => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const commentsRef = collection(db, 'comments')
    const newComment = {
      ...commentData,
      createdAt: serverTimestamp()
    }
    
    const docRef = await addDoc(commentsRef, newComment)
    console.log('‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ:', docRef.id)
    return { success: true, id: docRef.id }
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', error)
    
    // Fallback - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
    try {
      const comments = JSON.parse(localStorage.getItem('comments_fallback') || '[]')
      const newComment = {
        ...commentData,
        id: `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        createdAt: new Date()
      }
      comments.push(newComment)
      localStorage.setItem('comments_fallback', JSON.stringify(comments))
      
      console.log('üìù –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newComment)
      return { success: true, id: newComment.id, local: true }
    } catch (localError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', localError)
    }
    
    return { success: false, error: error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞' }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∫—É—Ä—Å—É
export const getCommentsByCourseId = async (courseId: string): Promise<FirestoreComment[]> => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const commentsRef = collection(db, 'comments')
    // –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ orderBy
    const q = query(
      commentsRef, 
      where('courseId', '==', courseId)
    )
    
    const querySnapshot = await getDocs(q)
    const comments: FirestoreComment[] = []
    
    querySnapshot.forEach((doc) => {
      comments.push({
        id: doc.id,
        ...doc.data()
      } as FirestoreComment)
    })
    
    // –°–æ—Ä—Ç—É—î–º–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
    comments.sort((a, b) => {
      const aTime = a.createdAt?.toDate ? a.createdAt.toDate().getTime() : 0
      const bTime = b.createdAt?.toDate ? b.createdAt.toDate().getTime() : 0
      return bTime - aTime // –ù–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É
    })
    
    console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –∫—É—Ä—Å—É', courseId, ':', comments.length)
    return comments
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
export const subscribeToComments = (courseId: string, callback: (comments: FirestoreComment[]) => void) => {
  try {
    if (!db) {
      throw new Error('Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    }

    const commentsRef = collection(db, 'comments')
    // –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ orderBy –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–±–∏ –≤ —Å–∫–ª–∞–¥–Ω–æ–º—É —ñ–Ω–¥–µ–∫—Å—ñ
    const q = query(
      commentsRef, 
      where('courseId', '==', courseId)
    )
    
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const comments: FirestoreComment[] = []
      
      querySnapshot.forEach((doc) => {
        comments.push({
          id: doc.id,
          ...doc.data()
        } as FirestoreComment)
      })
      
      // –°–æ—Ä—Ç—É—î–º–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ –∑–∞–º—ñ—Å—Ç—å orderBy –≤ –∑–∞–ø–∏—Ç—ñ
      comments.sort((a, b) => {
        const aTime = a.createdAt?.toDate ? a.createdAt.toDate().getTime() : 0
        const bTime = b.createdAt?.toDate ? b.createdAt.toDate().getTime() : 0
        return bTime - aTime // –ù–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É
      })
      
      console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ:', comments.length)
      callback(comments)
    }, (error) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:', error)
      
      // Fallback - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
      try {
        const localComments = JSON.parse(localStorage.getItem('comments_fallback') || '[]')
        const courseComments = localComments.filter((c: any) => c.courseId === courseId)
        console.log('üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:', courseComments.length)
        callback(courseComments)
      } catch (localError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:', localError)
        callback([])
      }
    })
    
    return unsubscribe
  } catch (error: any) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:', error)
    return () => {}
  }
}


